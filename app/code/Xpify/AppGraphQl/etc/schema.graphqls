enum LoadAppInputField {
    remote_id
    name
}

type Query {
    app(field: LoadAppInputField!, value: String!): App @doc(description: "Retrieve a single `App` object from the database.") @resolver(class: "Xpify\\AppGraphQl\\Model\\Resolver\\AppQuery")
}
type Mutation {
    saveApp(input: SaveAppInput!): App @doc(description: "Create order update a `App` object to the database.") @resolver(class: "Xpify\\AppGraphQl\\Model\\Resolver\\AppSaveMutation")
#    deleteApp(id: ID!): Boolean @doc(description: "Delete a `App` object from the database.") @resolver(class: "Xpify\\AppGraphQl\\Model\\Resolver\\DestroyAppMutation")
}
type App {
    id: ID! @doc(description: "The unique ID for a `App` object.")
    remote_id: String @doc(description: "The real Shopify App ID.")
    name: String! @doc(description: "The name of the app.")
    handle: String @doc(description: "The handle of the app.")
    api_key: String @doc(description: "The API key for the app.")
    secret_key: String @doc(description: "The secret key for the app.")
    created_at: String @doc(description: "The date and time when the app was created.")
    token: String @doc(description: "The token for the app.")
    scopes: String @doc(description: "The scopes for the app. Comma separated.")
    api_version: String @doc(description: "The API version for the app.")
}

input SaveAppInput {
    id: ID @doc(description: "The unique ID for a `App` object. If not provided, a new `App` object will be created.")
    remote_id: String @doc(description: "The real Shopify App ID.")
    name: String @doc(description: "The name of the app. Required.")
    handle: String @doc(description: "The handle of the app.")
    api_key: String @doc(description: "The API key for the app.")
    secret_key: String @doc(description: "The secret key for the app.")
    scopes: String @doc(description: "The scopes for the app. Comma separated.")
    api_version: String @doc(description: "The API version for the app.")
}
